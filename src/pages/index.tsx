import type { NextPage } from "next"
import Head from "next/head"
import { QRCodeSVG } from 'qrcode.react'
import { useRef, useState } from 'react'
import Modal from 'react-modal'
import { DownloadIcon } from '@heroicons/react/outline'
import { ClipboardCopyIcon } from '@heroicons/react/outline'
import { XIcon } from '@heroicons/react/outline'
import html2canvas from 'html2canvas'
import { jsPDF } from 'jspdf'



Modal.setAppElement('#__next')

const Home: NextPage = () => {

  const printRef = useRef<HTMLDivElement>(null)
  const [modalIsOpen, setModalIsOpen] = useState(false)

  const openModal = () => setModalIsOpen(true)
  const closeModal = () => setModalIsOpen(false)

  const handleCopyImage = async () => {
    const element = printRef.current
    const canvas = await html2canvas(element!)

    canvas.toBlob(function (blob) {
      const item = new ClipboardItem({ "image/png": blob! })
      navigator.clipboard.write([item])
    })
  }

  const handleDownloadImage = async () => {
    const element = printRef.current
    const canvas = await html2canvas(element!)

    const data = canvas.toDataURL('image/png')
    const link = document.createElement('a')

    if (typeof link.download === 'string') {
      link.href = data
      link.download = 'image.png'

      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
    } else {
      window.open(data)
    }
  }

  const handleDownloadPdf = async () => {
    const element = printRef.current
    const canvas = await html2canvas(element!)
    const data = canvas.toDataURL('image/png')

    const pdf = new jsPDF()
    const imgProperties = pdf.getImageProperties(data)
    const pdfWidth = pdf.internal.pageSize.getWidth()
    const pdfHeight = (imgProperties.height * pdfWidth) / imgProperties.width

    pdf.addImage(data, 'PNG', 0, 0, pdfWidth, pdfHeight)
    pdf.save('print.pdf')
  }

  return (
    <>
      <Head>
        <title>QR Code Playground</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>

        <button onClick={openModal}>Open Modal</button>

        <Modal
          isOpen={modalIsOpen}
          onRequestClose={closeModal} // clicking on overlay or pressing ESC

          /** default styles (more or less) translated to tailwind */
          // overlayClassName='fixed top-0 left-0 right-0 bottom-0 bg-white/[.75]'
          // className='absolute top-10 left-10 right-10 bottom-10 border border-gray-600 rounded bg-gray-100 overflow-auto outline-none p-5'

          /** custom styles: the overlay has Modal as its only child, so it can be easily centered with flex */
          overlayClassName='fixed top-0 left-0 right-0 bottom-0 bg-white/[.75] flex justify-center items-center'
          className='border border-slate-600 rounded bg-slate-100 overflow-auto outline-none p-3'

        >
          {/* <div className='flex justify-end items-center'>
            <button
              className='text-slate-600 hover:text-slate-700'
              onClick={closeModal}
            >
              <XIcon className="h-6 w-6"/>
            </button>
          </div> */}

          <div ref={printRef} className='flex flex-col justify-center items-center border border-gray-600 rounded bg-white p-2'>
            <h2 className='text-green-500 text-lg font-bold mb-1'>Lost and Found</h2>
            <div>100% anonymous</div>
            <div>Scan to send a message to the owner.</div>
            <QRCodeSVG className='m-3' value="https://reactjs.org/" />
          </div>

          <div className='flex justify-between'>
            <button
              className='flex items-center gap-1 mt-3 px-2 py-1.5 bg-slate-600 text-white font-medium text-xs leading-tight rounded shadow-md hover:bg-slate-700 hover:shadow-lg focus:bg-slate-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-slate-800 active:shadow-lg transition duration-150 ease-in-out'
              onClick={handleDownloadPdf}
            >
              <DownloadIcon className="h-6 w-6" />
              PDF
            </button>
            <button
              className='flex items-center gap-1 mt-3 px-2 py-1.5 bg-slate-600 text-white font-medium text-xs leading-tight rounded shadow-md hover:bg-slate-700 hover:shadow-lg focus:bg-slate-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-slate-800 active:shadow-lg transition duration-150 ease-in-out'
              onClick={handleDownloadImage}
            >
              <DownloadIcon className="h-6 w-6" />
              PNG
            </button>
            <button
              className='flex items-center gap-1 mt-3 px-2 py-1.5 bg-slate-600 text-white font-medium text-xs leading-tight rounded shadow-md hover:bg-slate-700 hover:shadow-lg focus:bg-slate-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-slate-800 active:shadow-lg transition duration-150 ease-in-out'
              onClick={handleCopyImage}
            >
              <ClipboardCopyIcon className="h-6 w-6" />
              COPY
            </button>
          </div>

        </Modal>

      </div>
    </>
  )
}

export default Home

